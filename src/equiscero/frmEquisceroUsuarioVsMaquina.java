
package equiscero;
//Autor: Roberto Carlos Castro

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class frmEquisceroUsuarioVsMaquina extends javax.swing.JFrame {
    //Turno es para determinar si es el turno de "X" o "O"
    //clic es para saber cuandtos clics lleva en cada boton
    int turno=1, clic=0, NumRamdom, fila, columna, posicionHorizontal, posicionVertical;
    int contador=0, forma, contadorBtnOcupados;
    //Matriz para almacenar "X" o "O" y luego ver quien gano
    String Juego[][] = new String [3][3];
    //Vector para almacenar los numero de clics de cada boton
    int NumeroDeClics [] = new int [9];
    boolean ocupado, ocupadoBtn1, ocupadoBtn2, ocupadoBtn3;
    String Equis="X", Cero="O", EquisOcero;
    //Asignar las imagenes de "X" y "O" a las variables ImgCero e ImgEquis
    ImageIcon ImgCero = new ImageIcon(getClass().getResource("/Imagenes/Cero.png"));
    ImageIcon ImgEquis = new ImageIcon(getClass().getResource("/Imagenes/Equis.png"));
    /**
     * Creates new form frmEquiscero
     */
    public frmEquisceroUsuarioVsMaquina() {
        initComponents();
        lbTitulo.setText("Usuario: X Maquina: O");
        //incializa la matriz con guines para que no de error al momento de comparar
        for (fila = 0; fila < 3; fila++) {
            for (columna = 0; columna < 3; columna++) {
                Juego [fila][columna]="-";
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBoton00 = new javax.swing.JButton();
        btnBoton01 = new javax.swing.JButton();
        btnBoton02 = new javax.swing.JButton();
        btnBoton10 = new javax.swing.JButton();
        btnBoton11 = new javax.swing.JButton();
        btnBoton12 = new javax.swing.JButton();
        btnBoton20 = new javax.swing.JButton();
        btnBoton22 = new javax.swing.JButton();
        lbTitulo = new javax.swing.JLabel();
        btnBoton21 = new javax.swing.JButton();
        lbIcono = new javax.swing.JLabel();
        btnReiniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBoton00.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton00ActionPerformed(evt);
            }
        });

        btnBoton01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton01ActionPerformed(evt);
            }
        });

        btnBoton02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton02ActionPerformed(evt);
            }
        });

        btnBoton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton10ActionPerformed(evt);
            }
        });

        btnBoton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton11ActionPerformed(evt);
            }
        });

        btnBoton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton12ActionPerformed(evt);
            }
        });

        btnBoton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton20ActionPerformed(evt);
            }
        });

        btnBoton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton22ActionPerformed(evt);
            }
        });

        lbTitulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbTitulo.setForeground(new java.awt.Color(0, 153, 204));

        btnBoton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBoton21ActionPerformed(evt);
            }
        });

        lbIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/IconoAnimado.gif"))); // NOI18N

        btnReiniciar.setText("Reiniciar");
        btnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBoton10, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(btnBoton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBoton00, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnBoton01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBoton21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(btnBoton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBoton12, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(btnBoton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBoton02, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(btnReiniciar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 25, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(6, 6, 6)
                        .addComponent(btnReiniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbIcono, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBoton01, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBoton00, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBoton02, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBoton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBoton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBoton12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBoton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBoton22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBoton21, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Metodo determinar Gandador
    public boolean determinarGanador(){
        boolean Ganador= false;
        //En la primera Intercion del bucle la variabe EquisOcero tiene "X"
        EquisOcero=Equis;
        for (int Cual = 0; Cual < 2; Cual++) {
            if (Juego[0][0].equals(EquisOcero)&&Juego[0][1].equals(EquisOcero)&&Juego[0][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[1][0].equals(EquisOcero)&&Juego[1][1].equals(EquisOcero)&&Juego[1][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[2][0].equals(EquisOcero)&&Juego[2][1].equals(EquisOcero)&&Juego[2][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[0][0].equals(EquisOcero)&&Juego[1][0].equals(EquisOcero)&&Juego[2][0].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[0][1].equals(EquisOcero)&&Juego[1][1].equals(EquisOcero)&&Juego[2][1].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[0][2].equals(EquisOcero)&&Juego[1][2].equals(EquisOcero)&&Juego[2][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[0][0].equals(EquisOcero)&&Juego[1][1].equals(EquisOcero)&&Juego[2][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            if (Juego[2][0].equals(EquisOcero)&&Juego[1][1].equals(EquisOcero)&&Juego[0][2].equals(EquisOcero)) {
                Ganador=true;
                break;
            }
            //En la segunda Intercion del bucle la variabe EquisOcero tiene "O"
            EquisOcero=Cero;
        }
        return Ganador;
}
    //Metodo reiniciar
    public void reiniciar(){
        //regresa el turno a 1
        turno=1;
        contador=0;
        //Reinicia cero los contadores de los clics
        for (int posicion = 0; posicion < 9; posicion++) {
            NumeroDeClics [posicion] = 0;
        }
        //Reiniciar la matriz con guiones
        for (fila = 0; fila < 3; fila++) {
            for (columna = 0; columna < 3; columna++) {
                Juego [fila][columna]="-";
            }
        }
        //Les quita los iconos de Equis o Cero a los botones 
        btnBoton00.setIcon(null);btnBoton01.setIcon(null);btnBoton02.setIcon(null);
        btnBoton10.setIcon(null);btnBoton11.setIcon(null);btnBoton12.setIcon(null);
        btnBoton20.setIcon(null);btnBoton21.setIcon(null);btnBoton22.setIcon(null);
    }
    
    public void maquina(){
        //Primero usa el metodo eleccionDelPrimero para elegir una posicion aleatoria a la cual asignarle "0"  y guarda
        //las posiciones en las variables "posicionHorizontal" y "posicionVertical" luego el metodo maquina las usa para
        //usar corectamente los metodos para ganar
        if (posicionHorizontal==0&&posicionVertical==0){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
            //La primera vez ocupa el metodo "ganarPrimeraColumna()" para asignar un nuevo "O"
            //Y si todos los de esa fila estan ocupados, se sale del metodo, le asigna el valor de "forma"
            //al contador(dentro del metodo) para que asi pueda evaluar si algun boton en el siguiente metodo esta disponible
                ganarPrimeraColumna();
            }
            if (contador==1){
                //Hay un nuevo valor de "forma" por si necesita otro cambio de metodo
                forma=2;
                ganarPrimeraFila();
            }
            if (contador==2) {
                forma=3;
                ganarDiagonal();
            }
            //Estoos metodos son extra por si se queda sin botnes vacios en los metodos anteriores
            if (contador==3){
                forma=4;
                ganarSegundaFila();
            }
            if (contador==4) {
                ganarTerceraFila();
            }
        }       
//-----------------------Es la misma logica para los demas botones, solo cambia el orden de los metodos---------------------
        if (posicionHorizontal==0&&posicionVertical==1){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarPrimeraFila();
            }
            if (contador==1){
                forma=2;
                ganarSegundaColumna();
            }
            if (contador==2) {
                forma=3;
                ganarPrimeraColumna();
            }
            if (contador==3){
                ganarTerceraColumna();
            }
        }
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==0&&posicionVertical==2){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarPrimeraFila();
            }
            if (contador==1){
                forma=2;
                ganarTerceraColumna();
            }
            if (contador==2) {
                forma=3;
                ganarDiagonalInvertida();
            }
            if (contador==3){
                forma=4;
                ganarSegundaFila();
            }
            if (contador==4){
                ganarTerceraFila();
            }            
        }
//-------------------------------------------------------------------------------------------------------------------        
        if (posicionHorizontal==1&&posicionVertical==0){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarPrimeraColumna();
            }
            if (contador==1){
                forma=2;
                ganarSegundaFila();
            }
            if (contador==2) {
                forma=3;
                ganarPrimeraFila();
            }
            if (contador==3){
                ganarTerceraFila();
            }
        }
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==1&&posicionVertical==1){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarDiagonal();
            }
            if (contador==1){
                forma=2;
                ganarDiagonalInvertida();
            }
            if (contador==2) {
                forma=3;
                ganarSegundaFila();
            }
            if (contador==3){
                ganarSegundaColumna();
            }            
        }  
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==1&&posicionVertical==2){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarSegundaFila();
            }
            if (contador==1){
                forma=2;
                ganarTerceraColumna();
            }
            if (contador==2) {
                forma=3;
                ganarPrimeraFila();
            }
            if (contador==3){
                ganarTerceraFila();
            }
        }      
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==2&&posicionVertical==0){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarTerceraFila();
            }
            if (contador==1){
                forma=2;
                ganarPrimeraColumna();
            }
            if (contador==2) {
                forma=3;
                ganarDiagonalInvertida();
            }
            if (contador==3){
                forma=4;
                ganarPrimeraFila();
            }
            if (contador==4){
                ganarSegundaFila();
            }            
        }          
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==2&&posicionVertical==1){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarTerceraFila();
            }
            if (contador==1){
                forma=2;
                ganarSegundaColumna();
            }
            if (contador==2) {
                forma=3;
                ganarPrimeraFila();
            }
            if (contador==3){
                ganarSegundaFila();
            }
        }          
//-------------------------------------------------------------------------------------------------------------------
        if (posicionHorizontal==2&&posicionVertical==2){
            contador=0;
            forma=0;
            if (contador==0){
                forma=1;
                ganarTerceraFila();
            }
            if (contador==1){
                forma=2;
                ganarTerceraColumna();
            }
            if (contador==2) {
                forma=3;
                ganarDiagonal();
            }
            if (contador==3){
                forma=4;
                ganarPrimeraFila();
            }
            if (contador==4){
                ganarSegundaFila();
            }            
        }                        
    }
    
    public void ganarPrimeraFila () {
        //Este metodo elige solo uno de los tres botones con los cuales podria ganar en la primera fila si este esta vacio
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            //Elige un numero aleatorio para evaluar los botones
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                //Evaluacion si el boton esta vacio
                if (Juego[0][0].equals(Equis)||Juego[0][0].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton00.setIcon(ImgCero);
                    Juego[0][0]=Cero;
                    NumeroDeClics[0]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[0][1].equals(Equis)||Juego[0][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton01.setIcon(ImgCero);
                    Juego[0][1]=Cero;
                    NumeroDeClics[1]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[0][2].equals(Equis)||Juego[0][2].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton02.setIcon(ImgCero);
                    Juego[0][2]=Cero;
                    NumeroDeClics[2]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            //La variable "contadorBtnOcupados" cuenta las repeticiones del bucle y si estas son mayor a 20 le asigna el 
            //valor de "forma" a contador para que en el metodo maquina haga el cambio del metodo para ganar
            //(Evalua si es mayor a 20 para darle bastantes oprotunidades al los numeros aleatorios)
            if (contadorBtnOcupados>20){
                contador=forma;
                break;            
            }
            contadorBtnOcupados=contadorBtnOcupados+1;
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }
//Los demas metodos de "ganar" tienen la misma logica y solo cambian las bosiciones a evaluar
    public void ganarSegundaFila () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[1][0].equals(Equis)||Juego[1][0].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton10.setIcon(ImgCero);
                    Juego[1][0]=Cero;
                    NumeroDeClics[3]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][1].equals(Equis)||Juego[1][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton11.setIcon(ImgCero);
                    Juego[1][1]=Cero;
                    NumeroDeClics[4]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[1][2].equals(Equis)||Juego[1][2].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton12.setIcon(ImgCero);
                    Juego[1][2]=Cero;
                    NumeroDeClics[5]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20){
                contador=forma;
                break;            
            }
            contadorBtnOcupados=contadorBtnOcupados+1;
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }

    public void ganarTerceraFila () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[2][0].equals(Equis)||Juego[2][0].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton20.setIcon(ImgCero);
                    Juego[2][0]=Cero;
                    NumeroDeClics[6]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[2][1].equals(Equis)||Juego[2][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton21.setIcon(ImgCero);
                    Juego[2][1]=Cero;
                    NumeroDeClics[7]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][2].equals(Equis)||Juego[2][2].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton22.setIcon(ImgCero);
                    Juego[2][2]=Cero;
                    NumeroDeClics[8]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20){
                contador=forma;
                break;            
            }
            contadorBtnOcupados=contadorBtnOcupados+1;
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }
    
    public void ganarPrimeraColumna () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[0][0].equals(Equis)||Juego[0][0].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton00.setIcon(ImgCero);
                    Juego[0][0]=Cero;
                    NumeroDeClics[0]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][0].equals(Equis)||Juego[1][0].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton10.setIcon(ImgCero);
                    Juego[1][0]=Cero;
                    NumeroDeClics[3]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][0].equals(Equis)||Juego[2][0].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton20.setIcon(ImgCero);
                    Juego[2][0]=Cero;
                    NumeroDeClics[6]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20) {
                contador=forma;
                break;
            }
            contadorBtnOcupados=contadorBtnOcupados+1;            
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }

    public void ganarSegundaColumna () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[0][1].equals(Equis)||Juego[0][1].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton01.setIcon(ImgCero);
                    Juego[0][1]=Cero;
                    NumeroDeClics[1]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][1].equals(Equis)||Juego[1][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton11.setIcon(ImgCero);
                    Juego[1][1]=Cero;
                    NumeroDeClics[4]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][1].equals(Equis)||Juego[2][1].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton21.setIcon(ImgCero);
                    Juego[2][1]=Cero;
                    NumeroDeClics[7]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20) {
                contador=forma;
                break;
            }
            contadorBtnOcupados=contadorBtnOcupados+1;            
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);        
    }
    
    public void ganarTerceraColumna () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[0][2].equals(Equis)||Juego[0][2].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton02.setIcon(ImgCero);
                    Juego[0][2]=Cero;
                    NumeroDeClics[2]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][2].equals(Equis)||Juego[1][2].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton12.setIcon(ImgCero);
                    Juego[1][2]=Cero;
                    NumeroDeClics[5]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][2].equals(Equis)||Juego[2][2].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton22.setIcon(ImgCero);
                    Juego[2][2]=Cero;
                    NumeroDeClics[8]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20) {
                contador=forma;
                break;
            }
            contadorBtnOcupados=contadorBtnOcupados+1;            
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }    
    
    public void ganarDiagonal () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[0][0].equals(Equis)||Juego[0][0].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton00.setIcon(ImgCero);
                    Juego[0][0]=Cero;
                    NumeroDeClics[0]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][1].equals(Equis)||Juego[1][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton11.setIcon(ImgCero);
                    Juego[1][1]=Cero;
                    NumeroDeClics[4]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][2].equals(Equis)||Juego[2][2].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton22.setIcon(ImgCero);
                    Juego[2][2]=Cero;
                    NumeroDeClics[8]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20) {
                contador=forma;
                break;
            }
            contadorBtnOcupados=contadorBtnOcupados+1;            
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }

    public void ganarDiagonalInvertida () {
        contadorBtnOcupados=0;
        do{
            ocupadoBtn1=true;
            ocupadoBtn2=true;
            ocupadoBtn3=true;
            NumRamdom=(int)(Math.random()*3+1);
            if (NumRamdom==1) {
                if (Juego[0][2].equals(Equis)||Juego[0][2].equals(Cero)){
                    ocupadoBtn1=true;
                }else {
                    btnBoton02.setIcon(ImgCero);
                    Juego[0][2]=Cero;
                    NumeroDeClics[2]=3;
                    ocupadoBtn1=false;
                    break;
                }
            }
            if (NumRamdom==2) {
                if (Juego[1][1].equals(Equis)||Juego[1][1].equals(Cero)){
                    ocupadoBtn2=true;
                }else {
                    btnBoton11.setIcon(ImgCero);
                    Juego[1][1]=Cero;
                    NumeroDeClics[4]=3;
                    ocupadoBtn2=false;
                    break;
                }                
            }
            if (NumRamdom==3) {
                if (Juego[2][0].equals(Equis)||Juego[2][0].equals(Cero)){
                    ocupadoBtn3=true;
                }else {
                    btnBoton20.setIcon(ImgCero);
                    Juego[2][0]=Cero;
                    NumeroDeClics[5]=3;
                    ocupadoBtn3=false;
                    break;
                }                
            }
            if (contadorBtnOcupados>20){
                contador=forma;
                break;
            }
            contadorBtnOcupados=contadorBtnOcupados+1;
        }while(ocupadoBtn1==true||ocupadoBtn2==true||ocupadoBtn3==true);
    }    
    
    public void eleccionDelPrimero(){
        do {
            //Elige posiciones Aleatoris
            posicionHorizontal=(int)(Math.random()*2+0);
            posicionVertical=(int)(Math.random()*2+0);
            ocupado=false;
            if (Juego[posicionHorizontal][posicionVertical].equals("X")||Juego[posicionHorizontal][posicionVertical].equals("O")){
                ocupado=true;
            }
            //Se sale del bucle hasta que la posicon elegida no tiene valores de  "X" o "O"
        } while (ocupado==true);
        
        //Cuando ya tiene posiciones validas le asigna cero al boton y aumenta el contador de clics para bloquearlo 
        if (posicionHorizontal==0&&posicionVertical==0){
            btnBoton00.setIcon(ImgCero);
            Juego[0][0]=Cero;
            NumeroDeClics [0]=3;
        }
        if (posicionHorizontal==0&&posicionVertical==1){
            btnBoton01.setIcon(ImgCero);
            Juego[0][1]=Cero;
            NumeroDeClics [1]=3;
        }
        if (posicionHorizontal==0&&posicionVertical==2){
            btnBoton02.setIcon(ImgCero);
            Juego[0][2]=Cero;
            NumeroDeClics [2]=3;
        }
        if (posicionHorizontal==1&&posicionVertical==0){
            btnBoton10.setIcon(ImgCero);
            Juego[1][0]=Cero;
            NumeroDeClics [3]=3;
        }
        if (posicionHorizontal==1&&posicionVertical==1){
            btnBoton11.setIcon(ImgCero);
            Juego[1][1]=Cero;
            NumeroDeClics [4]=3;
        }
        if (posicionHorizontal==1&&posicionVertical==2){
            btnBoton12.setIcon(ImgCero);
            Juego[1][2]=Cero;
            NumeroDeClics [5]=3;
        }
        if (posicionHorizontal==2&&posicionVertical==0){
            btnBoton20.setIcon(ImgCero);
            Juego[2][0]=Cero;
            NumeroDeClics [6]=3;
        }
        if (posicionHorizontal==2&&posicionVertical==1){
            btnBoton21.setIcon(ImgCero);
            Juego[2][1]=Cero;
            NumeroDeClics [7]=3;
        }
        if (posicionHorizontal==2&&posicionVertical==2){
            btnBoton22.setIcon(ImgCero);
            Juego[2][2]=Cero;
            NumeroDeClics [8]=3;
        }
    }
    
    
    private void btnBoton00ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton00ActionPerformed
        //Usa un contador de clics para que solo asigne "X" o "O" una vez
        clic = NumeroDeClics [0];
        if (turno%1==0){
            if (clic==0) {
                btnBoton00.setIcon(ImgEquis);
                Juego[0][0]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [0] = clic;
            }
        }    
        if (turno%2==0) {
            //En el segundo turno usa el metodo eleccionDel primero para eleguir un boton al cual asignarle CERO
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            //En los demas turnos usa el metodo maquina que tiene como base la elecion del primer boton
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            //En la jugada 5 evalua si ya hay ganadoy y si lo hay, muestra un mensaje y reinicia el juego
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        //Si no hay ganador en tod el juego muestra un mensaje y reinicia
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton00ActionPerformed
//El mismo funcionamiento para los demas botones ( copiar y pegar :v )
    private void btnBoton01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton01ActionPerformed
        clic = NumeroDeClics [1];
        if (turno%1==0){
            if (clic==0) {
                btnBoton01.setIcon(ImgEquis);
                Juego[0][1]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [1] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton01ActionPerformed

    private void btnBoton02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton02ActionPerformed
        clic = NumeroDeClics [2];
        if (turno%1==0){
            if (clic==0) {
                btnBoton02.setIcon(ImgEquis);
                Juego[0][2]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [2] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton02ActionPerformed

    private void btnBoton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton10ActionPerformed
        clic = NumeroDeClics [3];
        if (turno%1==0){
            if (clic==0) {
                btnBoton10.setIcon(ImgEquis);
                Juego[1][0]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [3] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton10ActionPerformed

    private void btnBoton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton11ActionPerformed
        clic = NumeroDeClics [4];
        if (turno%1==0){
            if (clic==0) {
                btnBoton11.setIcon(ImgEquis);
                Juego[1][1]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [4] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton11ActionPerformed

    private void btnBoton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton12ActionPerformed
        clic = NumeroDeClics [5];
        if (turno%1==0){
            if (clic==0) {
                btnBoton12.setIcon(ImgEquis);
                Juego[1][2]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [5] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton12ActionPerformed

    private void btnBoton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton20ActionPerformed
        clic = NumeroDeClics [6];
        if (turno%1==0){
            if (clic==0) {
                btnBoton20.setIcon(ImgEquis);
                Juego[2][0]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [6] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton20ActionPerformed

    private void btnBoton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton21ActionPerformed
        clic = NumeroDeClics [7];
        if (turno%1==0){
            if (clic==0) {
                btnBoton21.setIcon(ImgEquis);
                Juego[2][1]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [7] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton21ActionPerformed

    private void btnBoton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBoton22ActionPerformed
        clic = NumeroDeClics [8];
        if (turno%1==0){
            if (clic==0) {
                btnBoton22.setIcon(ImgEquis);
                Juego[2][2]=Equis;
                turno=turno+1;
                clic=clic+1;
                NumeroDeClics [8] = clic;
            }
        }    
        if (turno%2==0) {
            if (turno==2){eleccionDelPrimero();turno=turno+1;}
            else {maquina();turno=turno+1;}
        }
        if (turno>=5) {
            if (determinarGanador()==true) {
                JOptionPane.showMessageDialog(null, "Ya gano "+EquisOcero);
                reiniciar();
            }
        }
        if (turno>10&&determinarGanador()==false){
            JOptionPane.showMessageDialog(null, "No hay ganador");
            reiniciar();
        }
    }//GEN-LAST:event_btnBoton22ActionPerformed

    private void btnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarActionPerformed
        reiniciar();
    }//GEN-LAST:event_btnReiniciarActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEquisceroUsuarioVsMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEquisceroUsuarioVsMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEquisceroUsuarioVsMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEquisceroUsuarioVsMaquina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEquisceroUsuarioVsMaquina().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBoton00;
    private javax.swing.JButton btnBoton01;
    private javax.swing.JButton btnBoton02;
    private javax.swing.JButton btnBoton10;
    private javax.swing.JButton btnBoton11;
    private javax.swing.JButton btnBoton12;
    private javax.swing.JButton btnBoton20;
    private javax.swing.JButton btnBoton21;
    private javax.swing.JButton btnBoton22;
    private javax.swing.JButton btnReiniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbIcono;
    private javax.swing.JLabel lbTitulo;
    // End of variables declaration//GEN-END:variables
}
